using System;
using System.IO;         // <-- Needed for File.ReadAllBytes
using System.Net.Mail;
using System.Threading.Tasks;

namespace CratePilotSystemWS.Services.Email
{
    public class EmailServices
    {
        /// <summary>
        /// Sends an HTML email containing CRUD log details (or a simple message).
        /// Embeds the logo as a Base64 data URI.
        /// </summary>
        public static async Task<(bool success, string msg)> SendCrudLogEmail(string emailContentHtml)
        {
            string senderEmail = "PEN_EST1C@jabil.com";
            string receiverEmail = "SyedFaizAlhady_SyedAhmadAlhady@jabil.com";
            string subject = "eST1C Daily Data Updates";

            // 1) Read your local logo file and convert to Base64
            //    Make sure the path is correct and the file is accessible.
            string logoPath = @"C:\Users\4033375\Desktop\est1c_Projects\eST1C C#\Master\img\logo.png"; // <-- Update to your actual path
            byte[] logoBytes = File.ReadAllBytes(logoPath);
            string base64Logo = Convert.ToBase64String(logoBytes);

            // 2) Embed the image as a data URI in the HTML
            string body = $@"
                <div style='font-family: Arial, sans-serif; text-align: center; padding: 20px;'>
    <img src='data:image/png;base64,{base64Logo}' 
         alt='Jabil Logo' 
         style='width: 150px; margin-bottom: 20px;' />
    <h2 style='color: #333;'>eST1C Daily Data Updates</h2>
    <p style='color: #555; margin-top: 10px;'>
        This email is automatically generated by eST1C, an internal solution for daily data synchronization.
        The information contained here is intended for authorized personnel only. 
        If you are not the intended recipient, please disregard this message.
    </p>
    <div style='text-align: left; margin-top: 20px;'>
        {emailContentHtml}
    </div>
    <hr style='border: 0; height: 1px; background: #ccc; margin: 20px 0;' />
    <p style='font-size: 12px; color: #777;'>
        <em>Please do not reply to this email.</em>
    </p>
</div>";

            int retryCount = 0;
            const int maxRetries = 2;
            string lastErrorMessage = string.Empty;

            // Try multiple SMTP hosts if the first fails
            string[] smtpHosts =
            {
                "MYPENM0IESVR02.corp.JABIL.ORG",
                "CORIMC04.corp.jabil.org"
            };

            do
            {
                try
                {
                    using MailMessage message = new();
                    using SmtpClient smtp = new();

                    message.From = new MailAddress(senderEmail, "PEN EST1C System");
                    message.To.Add(new MailAddress(receiverEmail));
                    message.Subject = subject;
                    message.IsBodyHtml = true;
                    message.Body = body;

                    smtp.Port = 25;
                    smtp.Host = smtpHosts[retryCount];
                    smtp.DeliveryMethod = SmtpDeliveryMethod.Network;

                    await smtp.SendMailAsync(message);
                    return (true, $"Email successfully sent to {receiverEmail}");
                }
                catch (Exception ex)
                {
                    lastErrorMessage = ex.Message;
                    retryCount++;
                }
            }
            while (retryCount < maxRetries);

            return (false, $"Email failed after {maxRetries} retries. Last error: {lastErrorMessage}");
        }
    }
}
